#!/bin/bash
# Author: Marek Ma≈õlanka
# Project: DEKU
# URL: https://github.com/MarekMaslanka/deku
#
# Main file for DEKU

export CURRENT_DIR=`pwd`

MAIN_PATH=`realpath "$0"`
MAIN_PATH=`dirname "$MAIN_PATH"`
cd "$MAIN_PATH"

. ./header.sh
. ./common.sh

showCrosHelp()
{
	echo "DEKU is a tool that allow quick apply changes to the running kernel on the device.
The changes provided by DEKU lives in the kernel util next reboot.

Usage:
    deku --board=<CHROMEBOOK_BOARD_NAME> --target=<DUT_ADDRESS[:PORT]> COMMAND
Commands list:
    build                                 build the DEKU modules which are livepatch kernel's modules,
    deploy                                build and deploy the changes to the device.

Avaiable parameters:
    --board=<BOARD>                       board name. Meaning of this parameter is the same as in
                                          the ChromiumOS SDK,
    --target=<DUT_ADDRESS[:PORT]>         IP address with optional SSH port to the target device.

Example usage:
    ./deku --board=brya --target=192.168.0.100 deploy
	"
}

showHelp()
{
	if [[ -e /etc/cros_chroot_version ]]; then
		showCrosHelp
		return
	fi

	echo "DEKU is a tool that allow quick apply changes to the running kernel on the device.
The changes provided by DEKU lives in the kernel util next reboot.

Usage:
    deku -b <PATH_TO_KERNEL_BUILD_DIR> [--board=<CHROMEBOOK_BOARD_NAME>] --target <USER@DUT_ADDRESS[:PORT]> COMMAND
Commands list:
    build                                 build the DEKU modules which are livepatch kernel's modules,
    deploy                                build and deploy the changes to the device.
    sync                                  synchronize information about kernel source code.
                                          Use this command after building the kernel. The use of
                                          this command is not mandatory, but it will make DEKU work
                                          more reliably. When the --src_inst_dir parameter is used,
                                          executing this command after the kernel is built is
                                          unnecessary as DEKU will run more reliably.

Avaiable parameters:
    -b, --builddir                        path to kernel build directory,
    -s, --sourcesdir                      path to kernel sources directory. Use this parameter
                                          if DEKU can't find kernel sources dir,
    --board=<BOARD>                       (Only avaiable inside ChromiumOS SDK) board name. Meaning
                                          of this parameter is the same as in the ChromiumOS SDK.
                                          If this parameter is used then -b and -s parameters can
                                          be skipped,
    --target=<USER@DUT_ADDRESS[:PORT]>    SSH connection parameter to the target device. The given
                                          user must be able to load and unload kernel modules. The
                                          SSH must be configured to use key-based authentication.
                                          Below is an example with this parameter,
    --ssh_options=<\"-o ...\">              options for SSH. Below is an example with this parameter,
    --src_inst_dir=<PATH>                 directory with the kernel sources that were installed after
                                          the kernel was built. Having this directory makes DEKU
                                          working more reliable. As an alternative to this
                                          parameter, the 'deku sync' command can be executed after
                                          the kernel has been built to make DEKU work more reliably,

Example usage:
    ./deku -b /home/user/linux_build --target=root@192.168.0.100:2200 deploy

Example usage when custom key-based authentication key is used for ssh connection:
    ./deku -b /home/user/linux_build --target=root@192.168.0.100 --ssh_options=\"-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/key_rsa\" deploy
    "
}

exportVars()
{
	export workdir="$1"
	. ./header.sh

	[[ ! -f "$CONFIG_FILE" ]] && return
	while read -r line; do
		[[ "$line" != "" ]] && eval export "$line"
	done < "$CONFIG_FILE"
}

checkIfUpdated()
{
	[[ ! -f "$CONFIG_FILE" ]] && return $NO_ERROR
	[[ "$WORKDIR_HASH" == "$(generateDEKUHash)" ]] && return $NO_ERROR

	logInfo "DEKU has been updated. Running the 'make' command to rebuild the project..."
	make > /dev/null || exit 1
	logDebug "Removing modules from $workdir"
	rm -rf "$workdir"/deku_*

	sed -i "/^WORKDIR_HASH=.*/d" "$CONFIG_FILE"
	echo "WORKDIR_HASH=$(generateDEKUHash)" >> $CONFIG_FILE
	logDebug "Done!"
}

main()
{
	for ((i=1; i<=$#; i++))
	do
		local opt=${!i}
		[[ $opt == "-h" || $opt == "--help" ]] && { showHelp; exit; }
	done

	source "init_vars.sh" "$@"
	rc=$?
	if [ $rc != $NO_ERROR ]; then
		exit $rc
	fi

	exportVars "$workdir"
	checkIfUpdated

	# cache the information about modified files
	export CASHED_MODIFIED_FILES="$(modifiedFiles)"

	# check if kernel was updated
	if [[ -f "$KERNEL_VERSION_FILE" ]]; then
		local currKernVer=$(getKernelVersion)
		local prevKernVer=$(<$KERNEL_VERSION_FILE)

		[[ "$currKernVer" != "$prevKernVer" ]] && \
			bash "$COMMANDS_DIR/sync.sh" auto 1

		[[ "$KERN_SRC_INSTALL_DIR" && \
		   "$KERN_SRC_INSTALL_DIR" -nt "$KERNEL_VERSION_FILE" ]] && \
			bash "$COMMANDS_DIR/sync.sh" auto 2
	else
		getKernelVersion > "$KERNEL_VERSION_FILE"
	fi

	local command=${@: -1}
	if [[ ! -f "$COMMANDS_DIR/$command.sh" ]]; then
		if [[ "$command" == "init" ]]; then
			logErr "$command command has been removed."
			logErr "Please look to the README for more information"
			exit $ERROR_INVALID_PARAMETERS
		else
			logErr "Command '$command' not found"
		fi
		showHelp
		exit $ERROR_INVALID_PARAMETERS
	fi

	local rc=$NO_ERROR
	if [ ! -d "$workdir" ]; then
		logWarn "Can't find $workdir directory"
		rc=$ERROR_NO_WORKDIR
	elif [[ "$KERN_SRC_INSTALL_DIR" && ! -d "$KERN_SRC_INSTALL_DIR" ]]; then
		if [[ "$CHROMEOS_CHROOT" == 1 ]]; then
			logErr "ERROR: Your kernel must be build with: USE=\"livepatch kernel_sources\" emerge-$board chromeos-kernel-..."
		else
			logErr "Can't find installation dir with kernel sources ($KERN_SRC_INSTALL_DIR)."
			logErr "You must undo any changes made after the kernel was built and install kernel sources to the $KERN_SRC_INSTALL_DIR"
		fi
		exit $ERROR_INSUFFICIENT_BUILD_PARAMS
	else
		bash "$COMMANDS_DIR/$command.sh"
		rc=$?
	fi
	if [ $rc != $NO_ERROR ]; then
		echo -e "${RED}Fail!${NC}"
	fi
	exit $rc
}

main "$@"
